{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","actions.js","api/api.js","constants.js","containers/App.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","props","name","email","className","alt","src","CardList","map","user","index","key","id","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","App","onRequestRobots","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bd91855.chunk.js","sourcesContent":["import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n\t// console.log(action.type);\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\t// return {...state,searchField: action.payload}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: '',\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true });\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\trobots: action.payload,\r\n\t\t\t\tisPending: false,\r\n\t\t\t});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\terror: action.payload,\r\n\t\t\t\tisPending: false,\r\n\t\t\t});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import React from 'react';\r\n\r\n// const Card = ({name, email, id}) => {\r\nconst Card = (props) => {\r\n\tconst { name, email } = props;\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${name}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email} </p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\t// if (true) {\r\n\t// \tthrow new Error('Nooo!');\r\n\t// }\r\n\t// const cardsArray = robots.map((user, index) => {\r\n\t// \treturn (\r\n\t// \t\t<Card\r\n\t// \t\t\tkey={index}\r\n\t// \t\t\tid={robots[index].id}\r\n\t// \t\t\tname={robots[index].name}\r\n\t// \t\t\temail={robots[index].email}\r\n\t// \t\t/>\r\n\t// \t);\r\n\t// });\r\n\t// return <div>{cardsArray}</div>;\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((user, index) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\tid={robots[index].id}\r\n\t\t\t\t\t\tname={robots[index].name}\r\n\t\t\t\t\t\temail={robots[index].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ onSearchChange }) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tplaceholder=\"search robots\"\r\n\t\t\t\tonChange={onSearchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\toverflowY: 'scroll',\r\n\t\t\t\tborder: '5px solid black',\r\n\t\t\t\theight: '800px',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false,\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true });\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Ooops not good !!</h1>;\r\n\t\t} else {\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\nimport { apiCall } from './api/api';\r\n\r\nexport const setSearchField = (text) => {\r\n\t// console.log(text);\r\n\treturn {\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text,\r\n\t};\r\n};\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({\r\n\t\ttype: REQUEST_ROBOTS_PENDING,\r\n\t});\r\n\tapiCall('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch((error) =>\r\n\t\t\tdispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n\t\t);\r\n};\r\n","export const apiCall = (link) =>\r\n\tfetch(link).then((response) => response.json());\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\n// import { robots } from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport { connect } from 'react-redux';\r\n// import { requestRobots } from '../reducers';\r\n// import { ReactComponent } from '*.svg';\r\n\r\n// state - object >> props\r\n// props -things that come out of state\r\n\r\n// if we need to use state  - we need to have class\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.searchRobots.error,\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots()),\r\n\t};\r\n};\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter((robot) => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\t\t//\t Conditional rendering\r\n\t\treturn isPending ? (\r\n\t\t\t<h1>Loading...</h1>\r\n\t\t) : (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t\t\t\t<SearchBox onSearchChange={onSearchChange} />\r\n\t\t\t\t{/* <CardList robots={this.state.robots} /> */}\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { searchRobots, requestRobots } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\n// import Card from './Card';\n// import * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import { robots } from './robots';\n// import CardList from './CardList';\nimport App from './containers/App';\n\nconst rootReducer = combineReducers({\n\tsearchRobots,\n\trequestRobots,\n});\nconst logger = createLogger();\nconst store = createStore(\n\trootReducer,\n\tapplyMiddleware(thunkMiddleware, logger)\n);\n\n// ReactDOM.render(\n// \t<App store={store} />,\n// \tdocument.getElementById('root')\n// );\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}